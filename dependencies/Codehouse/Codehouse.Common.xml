<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codehouse.Common</name>
    </assembly>
    <members>
        <member name="T:Codehouse.Common.Attributes.IdAttribute">
            <summary>
            <see cref="T:System.Attribute"/> for use in conjunction with the Codehouse <c>ItemIdLoader</c> pipeline class
            </summary>
        </member>
        <member name="M:Codehouse.Common.Attributes.IdAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the  class <see cref="T:Codehouse.Common.Attributes.IdAttribute"/> class.
            </summary>
            <param name="id">ID to be used for the item</param>
        </member>
        <member name="P:Codehouse.Common.Attributes.IdAttribute.Id">
            <summary>
            Gets the ID to be used for the item
            </summary>
        </member>
        <member name="T:Codehouse.Common.Attributes.PathAttribute">
            <summary>
            <see cref="T:System.Attribute"/> for use in conjunction with the Codehouse <c>ItemIdLoader</c> pipeline class
            </summary>
        </member>
        <member name="M:Codehouse.Common.Attributes.PathAttribute.#ctor(System.String)">
            <summary>Initialises a new instance of the  class <see cref="T:Codehouse.Common.Attributes.PathAttribute"/> class.</summary>
            <param name="path">Path to be used for the item</param>
        </member>
        <member name="P:Codehouse.Common.Attributes.PathAttribute.Path">
            <summary>
            Gets the path to be used for the item
            </summary>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.AddCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Adds a CSS class to a given control
            </summary>
            <param name="control">Control to manipulate</param>
            <param name="className">Css class name to add</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.AddCssClass(System.Web.UI.UserControl,System.String)">
            <summary>
            Adds a CSS class to a given control
            </summary>
            <param name="control">Control to manipulate</param>
            <param name="className">Css class name to add</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.AddCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Adds a CSS class to a given control
            </summary>
            <param name="control">Control to manipulate</param>
            <param name="className">Css class name to add</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.RemoveCssClass(System.Web.UI.HtmlControls.HtmlControl,System.String)">
            <summary>
            Remove a CSS class from a given control
            </summary>
            <param name="control">Control to manipulate</param>
            <param name="className">Css class name to remove</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.RemoveCssClass(System.Web.UI.UserControl,System.String)">
            <summary>
            Remove a CSS class from a given control
            </summary>
            <param name="control">Control to manipulate</param>
            <param name="className">Css class name to remove</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.RemoveCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Remove a CSS class from a given control
            </summary>
            <param name="control">Control to manipulate</param>
            <param name="className">Css class name to remove</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.Remove(System.Web.UI.Control)">
            <summary>
            Removes a control from its parent's control collection.
            </summary>
            <param name="control">Control to remove</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.ReparentChildren(System.Web.UI.Control)">
            <summary>
            Moves all the children of a given <paramref name="control"/>
            to the parent of that control.
            </summary>
            <param name="control">Control to modify</param>
        </member>
        <member name="M:Codehouse.Common.ControlExtensions.ReparentChildren(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Moves all the children of a given <paramref name="control"/>
            to the <paramref name="newParent"/>.
            </summary>
            <param name="control">Control to remove children from</param>
            <param name="newParent">Control to add children to</param>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ContainsOnly``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Check whether a <paramref name="collection"/> of type
            <typeparamref name="T"/> contains only the objects specified
            in <paramref name="elements"/>.
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/></typeparam>
            <param name="collection">Collection to check</param>
            <param name="elements">Elements to check for</param>
            <returns>True iff the collection contains only the objects in <paramref name="elements"/></returns>
            <remarks>
            Ensures that <paramref name="collection"/> is a subset of <paramref name="elements"/>
            </remarks>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ContainsOnly``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Check whether a <paramref name="collection"/> of type
            <typeparamref name="T"/> contains only the objects specified
            in <paramref name="elements"/>.
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/></typeparam>
            <param name="collection">Collection to check</param>
            <param name="comparer">Comparer to use (null for default)</param>
            <param name="elements">Elements to check for</param>
            <returns>True iff the collection contains only the objects in <paramref name="elements"/></returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.Empty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether a <paramref name="collection"/> of type
            <typeparamref name="T"/> is empty.
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/></typeparam>
            <param name="collection">Collection to check</param>
            <returns>True if the item is empty</returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ExceptNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes any null values from a given <paramref name="collection"/>.
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/></typeparam>
            <param name="collection">Collection to filter</param>
            <returns>A collection with no null elements</returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ExceptWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            An inverse Where method
            </summary>
            <typeparam name="T">An object</typeparam>
            <param name="collection">Collection</param>
            <param name="predicate">Predicate</param>
            <returns>The items from collection where the predicate returns false</returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action on each element inside a collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Collection</param>
            <param name="action">Action</param>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.InGroupsOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Separates a given <paramref name="collection"/> into groups of size <paramref name="groupSize"/>.
            The final group may contain fewer items depending on the length of the <paramref name="collection"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Collection</param>
            <param name="groupSize">Number of items per group</param>
            <returns>An array of arrays of size <paramref name="groupSize"/></returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check whether a <paramref name="collection"/> of type
            <typeparamref name="T"/> is null or empty.
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/></typeparam>
            <param name="collection">Collection to check</param>
            <returns>True if the item is null or empty</returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ToEnglishList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String)">
            <summary>
            <para>
            Converts a <paramref name="collection"/> of objects of type
            <typeparamref name="T"/> to a formatted English list, delimited
            with <paramref name="delimiter"/> except for the final item,
            which is joined by <paramref name="conjunction"/>.
            </para>
            <para>
            Generate lists like "a, b, c and d".
            </para>
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/> items</typeparam>
            <param name="collection">Collection to format</param>
            <param name="converter">Converts objects of type <typeparamref name="T"/> to <see cref="T:System.String"/></param>
            <param name="delimiter">List delimiter</param>
            <param name="conjunction">Final conjunction</param>
            <returns>A formatted list of the form "a, b, c and d".</returns>
        </member>
        <member name="M:Codehouse.Common.EnumerableExtensions.ToEnglishList(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            <para>
            Converts a <paramref name="collection"/> of objects of type
            <typeparamref name="T"/> to a formatted English list, delimited
            with <paramref name="delimiter"/> except for the final item,
            which is joined by <paramref name="conjunction"/>.
            </para>
            <para>
            Generate lists like "a, b, c and d".
            </para>
            </summary>
            <typeparam name="T">Type of <paramref name="collection"/> items</typeparam>
            <param name="collection">Collection to format</param>
            <param name="delimiter">List delimiter (e.g. ", ")</param>
            <param name="conjunction">Final conjunction (e.g. "and")</param>
            <returns>A formatted list of the form "a, b, c and d".</returns>
        </member>
        <member name="M:Codehouse.Common.HtmlTextWriterExtensions.RenderTag(System.Web.UI.HtmlTextWriter,System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Renders a begin tag immediately, and then an end tag upon disposal of the return item.
            </summary>
            <example>
            Example usage:
            <code>
                using (writer.RenderTag(HtmlTextWriterTag.Div))
                {
                    // Do more stuff
                }
            </code>
            </example>
            <param name="writer">The HTML text writer</param>
            <param name="tag">The tag to render</param>
            <returns>A disposable object, which scopes the tag</returns>
        </member>
        <member name="M:Codehouse.Common.HtmlTextWriterExtensions.RenderTag(System.Web.UI.HtmlTextWriter,System.Web.UI.HtmlTextWriterTag,System.String)">
            <summary>
            Renders a begin tag immediately, and then an end tag upon disposal of the return item.
            </summary>
            <example>
            Example usage:
            <code>
                using (writer.RenderTag(HtmlTextWriterTag.Div, "myClass");)
                {
                    // Do more stuff
                }
            </code>
            </example>
            <param name="writer">The HTML text writer</param>
            <param name="tag">The tag to render</param>
            <param name="cssClass">CSS class to apply to the tag</param>
            <returns>A disposable object, which scopes the tag</returns>
        </member>
        <member name="M:Codehouse.Common.HtmlTextWriterExtensions.RenderTag(System.Web.UI.HtmlTextWriter,System.String,System.String)">
            <summary>
            Renders a begin tag immediately, and then an end tag upon disposal of the return item.
            </summary>
            <example>
            Example usage:
            <code>
                using (writer.RenderTag("foo", "myClass");)
                {
                    // Do more stuff
                }
            </code>
            </example>
            <param name="writer">The HTML text writer</param>
            <param name="tag">The tag to render</param>
            <param name="cssClass">CSS class to apply to the tag</param>
            <returns>A disposable object, which scopes the tag</returns>
        </member>
        <member name="M:Codehouse.Common.HtmlTextWriterExtensions.RenderEmptyTag(System.Web.UI.HtmlTextWriter,System.Web.UI.HtmlTextWriterTag)">
            <summary>
            Renders an empty tag
            </summary>
            <param name="writer">The HTML text writer</param>
            <param name="tag">The tag to render</param>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
            <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
             <summary>
             Indicates that the value of the marked element could be <c>null</c> sometimes,
             so the check for <c>null</c> is necessary before its usage.
             </summary>
             <example>
             <code>
             [CanBeNull]
             public object Test()
             {
               return null;
             }
            
             public void UseTest()
             {
               var p = Test();
               var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
             <summary>
             Indicates that the value of the marked type (or its derivatives)
             cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
             However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
             </summary>
             <example>
             <code>
             [CannotApplyEqualityOperator]
             class NoEquality
             {
             }
            
             class UsesNoEquality
             {
               public void Test()
               {
                 var ca1 = new NoEquality();
                 var ca2 = new NoEquality();
            
                 if (ca1 != null) // OK
                 {
                   bool condition = ca1 == ca2; // Warning
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
             <summary>
             When applied to a target attribute, specifies a requirement for any type marked with
             the target attribute to implement or inherit specific type or types.
             </summary>
             <example>
             <code>
             [BaseTypeRequired(typeof(IComponent)] // Specify requirement
             public class ComponentAttribute : Attribute
             {}
            
             [Component] // ComponentAttribute requires implementing IComponent interface
             public class MyComponent : IComponent
             {}
             </code>
             </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC action.
            If applied to a method, the MVC action name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC araa.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC controller.
            If applied to a method, the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Controller.View(String, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Controller.View(String, Object)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC partial view.
            If applied to a method, the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC view.
            If applied to a method, the MVC view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.Mvc.Controller.View(Object)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example>
            <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl)
            {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <see cref="!:System.Web.WebPages.WebPageBase.RenderSection(String)"/>
            </summary>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.Capitalise(System.String)">
            <summary>
            Capitalises the first letter of a string only.
            </summary>
            <param name="value">String to capitalise</param>
            <returns>A capitalised string, or <see langword="null"/> if <paramref name="value"/> is null</returns>
            <remarks>
            Like <see cref="M:Codehouse.Common.StringExtensions.ToSentence(System.String)"/>, except the remainder of the string is left in its original case.
            </remarks>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.CapitaliseAll(System.String,System.Boolean)">
            <summary>
            Capitalises the first letter of every word in a string.  Can either preserve the case of the remaining letters
            of each word or not, depending on <paramref name="preserveWordCase"/>.
            </summary>
            <param name="value">String to capitalise</param>
            <param name="preserveWordCase">Indicates whether or not to lower-case the remaining word letters</param>
            <returns>A capitalised string, or null if <paramref name="value"/> is null</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats a string with given parameters
            </summary>
            <param name="value">String to format</param>
            <param name="args">Parameters to insert into the format string</param>
            <returns>A formatted string</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.FromBase64(System.String)">
            <summary>
            Decodes a given string, <paramref name="value"/>, from base64
            </summary>
            <param name="value">String to decode</param>
            <returns>A decoded string</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.FromLast(System.String,System.String)">
            <summary>
            Returns a substring of the given <paramref name="value"/> string
            from the last occurrence of the <paramref name="delimiter"/> string.
            </summary>
            <param name="value">Value to split</param>
            <param name="delimiter">Delimiter to find</param>
            <returns>A string</returns>
            <remarks>
            If <paramref name="delimiter"/> is not present in the string, an empty
            string is returned.
            </remarks>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether a string is <see langword="null"/> or empty
            </summary>
            <param name="value">String to check</param>
            <returns>True if the string is null or empty</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether a string is <see langword="null"/> or whitespace
            </summary>
            <param name="value">String to check</param>
            <returns>True if the string is null or whitespace</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.SplitOnCharacters(System.String,System.String)">
            <summary>
            Splits a given string <paramref name="value"/> based on any one of the specified
            <paramref name="delimiterCharacters"/>.
            <para>Empty or null strings return an empty array.</para>
            </summary>
            <param name="value">String to split</param>
            <param name="delimiterCharacters">One or more delimiter characters</param>
            <returns>An array of strings</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.ToBase64(System.String)">
            <summary>
            Encodes a string to base64
            </summary>
            <param name="value">String to encode</param>
            <returns>An encoded string</returns>
        </member>
        <member name="M:Codehouse.Common.StringExtensions.ToSentence(System.String)">
            <summary>
            Converts a mixed-case string to sentence case
            (first letter is upper-case, other letters are
            lower-case).
            </summary>
            <param name="value">String to convert</param>
            <returns>A modified string, or <see langword="null"/> if <paramref name="value"/> is null</returns>
        </member>
        <member name="F:Codehouse.Common.Utilities.CaseConverter.PascalFieldMatcher">
            <summary>
            Regular expression to match fields in Pascal case
            </summary>
            <remarks>
            Matches:
            1) Any capital preceded by a non-capital
            2) Any capital preceded by a capital AND proceeded by a non-capital
            </remarks>
        </member>
        <member name="M:Codehouse.Common.Utilities.CaseConverter.PascalCaseToSentenceCase(System.String)">
            <summary>
            Converts Pascal- or camel-case strings to sentence case
            e.g. "MyCMSFieldName" to "My CMS field name"
            </summary>
            <param name="value">Text to convert</param>
            <returns>A converted string</returns>
        </member>
        <member name="M:Codehouse.Common.Utilities.CaseConverter.HyphenatedToSentenceCase(System.String)">
            <summary>
            Converts hyphenated strings to sentence case.
            e.g. "my-account" to "My account"
            </summary>
            <param name="value">Text to convert</param>
            <returns>A converted string</returns>
        </member>
        <member name="M:Codehouse.Common.XElementExtensions.GetDecimalAttribute(System.Xml.Linq.XElement,System.String,System.Decimal)">
            <summary>
            Gets the value of an attribute (of name <paramref name="attributeName"/>) on a given <paramref name="element"/>
            as a decimal.  If the value does not exist or cannot be parsed as a decimal, <paramref name="defaultValue"/>
            will be returned.
            </summary>
            <param name="element">Element from which to retrieve the attribute</param>
            <param name="attributeName">Name of the attribute</param>
            <param name="defaultValue">Default value</param>
            <returns>The decimal value of the attribute or the default value provided</returns>
        </member>
        <member name="M:Codehouse.Common.XElementExtensions.GetIntAttribute(System.Xml.Linq.XElement,System.String,System.Int32)">
            <summary>
            Gets the value of an attribute (of name <paramref name="attributeName"/>) on a given <paramref name="element"/>
            as an integer.  If the value does not exist or cannot be parsed as an integer, <paramref name="defaultValue"/>
            will be returned.
            </summary>
            <param name="element">Element from which to retrieve the attribute</param>
            <param name="attributeName">Name of the attribute</param>
            <param name="defaultValue">Default value</param>
            <returns>The integer value of the attribute or the default value provided</returns>
        </member>
        <member name="M:Codehouse.Common.XElementExtensions.GetAttributeValue(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Gets the value of an attribute (of name <paramref name="attributeName"/>) on a given <paramref name="element"/>
            as a string.  If the value does not exist, <paramref name="defaultValue"/> will be returned.
            </summary>
            <param name="element">Element from which to retrieve the attribute</param>
            <param name="attributeName">Name of the attribute</param>
            <param name="defaultValue">Default value</param>
            <returns>The value of the attribute or the default value provided</returns>
        </member>
        <member name="M:Codehouse.Common.XElementExtensions.GetAttributeValue``1(System.Xml.Linq.XElement,System.String,``0,System.Func{System.String,``0,``0})">
            <summary>
            Gets the value of an attribute (of name <paramref name="attributeName"/>) on a given <paramref name="element"/>
            as an arbitrary type.  If the value does not exist or cannot be parsed as an integer, <paramref name="defaultValue"/>
            will be returned.  The parsing will be carried out by the given <paramref name="parser"/> function.
            </summary>
            <param name="element">Element from which to retrieve the attribute</param>
            <param name="attributeName">Name of the attribute</param>
            <param name="defaultValue">Default value</param>
            <param name="parser">Function to convert the attribute value (string) to the arbitrary type or return default value if conversion fails.</param>
            <returns>The parsed value of the attribute or the default value provided</returns>
        </member>
        <member name="T:Codehouse.Common.XmlDocumentExtensions">
            <summary>
            Suite of extension methods for all classes within the <see cref="N:System.Xml"/> namespace.
            </summary>
        </member>
        <member name="M:Codehouse.Common.XmlDocumentExtensions.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value of an attribute, <paramref name="attributeName"/>, belonging to the given <paramref name="node"/>.
            </summary>
            <param name="node">XML node</param>
            <param name="attributeName">Name of the attribute</param>
            <returns>The value of the attribute, or <c>null</c> if the attribute does not exist.</returns>
        </member>
        <member name="M:Codehouse.Common.XmlDocumentExtensions.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets the value of an attribute, <paramref name="attributeName"/>, belonging to the given <paramref name="node"/>.
            </summary>
            <param name="node">XML node</param>
            <param name="attributeName">Name of the attribute</param>
            <param name="defaultValue">Value to return if the attribute is not present</param>
            <returns>The value of the attribute, or <paramref name="defaultValue"/> if the attribute does not exist.</returns>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codehouse.Common.Sitecore</name>
    </assembly>
    <members>
        <member name="T:Codehouse.Common.Attributes.CssDependencyAttribute">
            <summary>
            Attribute used to introduce CSS dependencies on <see cref="T:Codehouse.Common.Controls.SublayoutBase"/>
            controls.
            </summary>
        </member>
        <member name="T:Codehouse.Common.Attributes.ScriptDependencyAttribute">
            <summary>
            Attribute used to introduce JS dependencies on <see cref="T:Codehouse.Common.Controls.SublayoutBase"/>
            controls.
            </summary>
        </member>
        <member name="T:Codehouse.Common.Controls.DynamicItemPlaceholder">
            <summary>
            The dynamic item placeholder is a specialisation of the <see cref="T:Codehouse.Common.Controls.DynamicPlaceholder"/> control
            that allows the placeholder ID to be populated using a predefined identifier (<see cref="P:Codehouse.Common.Controls.DynamicItemPlaceholder.AssociatedItemId"/>).
            </summary>
        </member>
        <member name="T:Codehouse.Common.Controls.DynamicPlaceholder">
            <remarks>Credit for this goes to http://johnnewcombe.net/blog/post/17 </remarks>
        </member>
        <member name="M:Codehouse.Common.Controls.DynamicItemPlaceholder.GetDynamicKey">
            <summary>
            Resolves the dynamic placeholder key of this control
            </summary>
            <returns>A placeholder key.</returns>
        </member>
        <member name="P:Codehouse.Common.Controls.DynamicItemPlaceholder.AssociatedItemId">
            <summary>
            Gets or sets the item ID associated with this placeholder
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Codehouse.Common.Controls.ItemRepeater" -->
        <member name="T:Codehouse.Common.Interfaces.IHaveADataSource">
            <summary>
            Marker interface for controls which have DataSource functionality
            <para>Note that this does not prevent DataSource-setting recursion.</para>
            </summary>
        </member>
        <member name="P:Codehouse.Common.Interfaces.IHaveADataSource.DataSource">
            <summary>
            Gets the path of the Sitecore item representing the given
            data source.  If no data source is given, then the context
            item is used.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Interfaces.IHaveADataSource.DataSourceItem">
            <summary>
            Gets the Sitecore item representing the given data source.
            If no data source is given, then the context item is used.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.DataSource">
            <summary>
            Data source for the control
            </summary>
            <remarks>
            Defaults to the context item if not set.
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.DataSourceItem">
            <summary>
            Data source for the control
            </summary>
            <remarks>
            Defaults to the context item if not set.
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.FieldName">
            <summary>
            Field to take the list of items from (field must be a reference field,
            and must be present on the <see cref="P:Codehouse.Common.Controls.ItemRepeater.DataSource"/> item).
            </summary>
            <remarks>
            <para>
            If this property is set then the <see cref="P:Codehouse.Common.Controls.ItemRepeater.DataSource"/> property must
            also be set
            </para>
            <para>
            If this property is not set then the <see cref="P:Codehouse.Common.Controls.ItemRepeater.Items"/> property must
            be set instead.
            </para>
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.Items">
            <summary>
            List of items to use as the repeating data
            </summary>
            <remarks>
            If this is not specified, the <see cref="P:Codehouse.Common.Controls.ItemRepeater.FieldName"/> property must be
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.Item">
            <summary>
            Shown for every item in the list (unless <see cref="P:Codehouse.Common.Controls.ItemRepeater.AlternateItem"/>
            is also specified.
            </summary>
            <remarks>
            Local data source is equal to the given list item
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.AlternateItem">
            <summary>
            Shown for every second item in the list, if present.
            </summary>
            <remarks>
            Local data source is equal to the given list item
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.Header">
            <summary>
            Shown prior to any item templates when the list provided is not empty,
            if present
            </summary>
            <remarks>
            Local data source is equal to the control <see cref="P:Codehouse.Common.Controls.ItemRepeater.DataSource"/>.
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.Footer">
            <summary>
            Shown after any item templates when the list provided is not empty,
            if present
            </summary>
            <remarks>
            Local data source is equal to the control <see cref="P:Codehouse.Common.Controls.ItemRepeater.DataSource"/>.
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.NoItems">
            <summary>
            Shown if the list provided is empty
            </summary>
            <remarks>
            Local data source is equal to the control <see cref="P:Codehouse.Common.Controls.ItemRepeater.DataSource"/>.
            </remarks>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.TemplateBuiltArgs.TemplateType">
            <summary>
            The type of template that has just been built
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.ItemRepeater.TemplateBuiltArgs.Container">
            <summary>
            The control inside which the template has been built
            </summary>
        </member>
        <member name="M:Codehouse.Common.Controls.SublayoutBase.FaultTolerantCall(System.Boolean,System.Action)">
            <summary>
            Immediately invokes <paramref name="baseMethod"/> in the context of an exception handler.
            <para>If the exception is not handled appropriately, then the exception will be re-thrown.</para>
            <para>If <paramref name="deferAction"/> is <c>true</c>, then the action taken will be deferred
            until the <c>Page.PreRenderComplete</c> event</para>
            </summary>
            <param name="deferAction"></param>
            <param name="baseMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Codehouse.Common.Controls.SublayoutBase.GetDatasourceItem">
            <summary>
            This method loads the data source from any container present
            </summary>
        </member>
        <member name="M:Codehouse.Common.Controls.SublayoutBase.InitialiseSublayout">
            <summary>
            Invokes the sublayout initialisation (<c>sublayoutInit</c>) pipeline on
            the control if it has not already been invoked.
            </summary>
        </member>
        <member name="M:Codehouse.Common.Controls.SublayoutBase.LoadParameters">
            <summary>
            This method loads the presentation parameters from any container present
            </summary>
        </member>
        <member name="M:Codehouse.Common.Controls.SublayoutBase.HandleError(System.Boolean,System.Exception)">
            <summary>
            Handles an error raised by the sublayout during the course of processing
            </summary>
            <param name="deferAction">A value indicating whether the action should be deferred or executed immediately</param>
            <param name="ex">The exception that has been raised</param>
            <returns><c>true</c> if the exception was handled and does not need to be re-thrown.  <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Codehouse.Common.Controls.SublayoutBase.DataSource">
            <summary>
            Gets the path of the Sitecore item representing the given
            data source.  If no data source is given, then the context
            item is used.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.SublayoutBase.DataSourceItem">
            <summary>
            Gets the Sitecore item representing the given data source.
            If no data source is given, then the context item is used.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.SublayoutBase.Parameters">
            <summary>
            The list of parameters that were passed to the sublayout
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.SublayoutBase.IsFaulted">
            <summary>
            Gets or sets a value indicating whether or not the sublayout is in a faulted state (and
            so will not appear on the page).  Once set to <c>true</c>, cannot be unset.
            </summary>
        </member>
        <member name="T:Codehouse.Common.Controls.ToggleFieldPanel">
            <summary>
            A specialisation of the <see cref="T:System.Web.UI.WebControls.Panel"/> control which assigns its visibility
            based on a checkbox field, specified by <see cref="P:Codehouse.Common.Controls.ToggleFieldPanel.Field"/> from the
            <see cref="P:Codehouse.Common.Controls.ToggleFieldPanel.DataSourceItem"/> at load time.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.ToggleFieldPanel.Field">
            <summary>
            Gets or sets the checkbox field that will control visibility of this panel
            </summary>
        </member>
        <member name="T:Codehouse.Common.Controls.WrappedPlaceholder">
            <summary>
            A placeholder control that, if it contains controls, will wrap itself in a div using the
            provided <see cref="P:Codehouse.Common.Controls.WrappedPlaceholder.WrapperClass"/> and <see cref="P:Codehouse.Common.Controls.WrappedPlaceholder.WrapperId"/> as a CSS class and/or ID
            respectively.
            </summary>
        </member>
        <member name="M:Codehouse.Common.Controls.WrappedPlaceholder.DoRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="P:Codehouse.Common.Controls.WrappedPlaceholder.WrapperClass">
            <summary>
            Gets or sets the wrapper Css class.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.WrappedPlaceholder.WrapperId">
            <summary>
            Gets or sets the wrapper id.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Controls.WrappedPlaceholder.WrapperTag">
            <summary>
            Gets or sets the tag to use for wrapping (default: div)
            </summary>
        </member>
        <member name="M:Codehouse.Common.DatabaseExtensions.GetItem(Sitecore.Data.Database,System.Guid)">
            <summary>
            Gets an item from the given <paramref name="database"/> with a given <paramref name="id"/>
            </summary>
            <param name="database">Database to fetch the item from</param>
            <param name="id">ID of the item to fetch</param>
            <returns>An item if one can be found.</returns>
        </member>
        <member name="T:Codehouse.Common.Events.DynamicPlaceholderDeletionCascade">
            <remarks>Credit for this goes to http://johnnewcombe.net/blog/post/17 </remarks>
        </member>
        <member name="M:Codehouse.Common.Events.DynamicPlaceholderDeletionCascade.ShouldRemoveDynamicRendering(Sitecore.Data.Items.Item,Sitecore.Layouts.RenderingReference[],Sitecore.Data.ID)">
            <summary>
            Determines whether a rendering belonging to some form of dynamic placeholder
            should be removed from the presentation settings for the given <paramref name="item"/>.
            </summary>
            <param name="item">Item being checked</param>
            <param name="renderingReferences">Rendering references for the current item</param>
            <param name="dynamicPlaceholderId">ID of the dynamic placeholder</param>
            <returns>True if the rendering should be removed.</returns>
        </member>
        <member name="T:Codehouse.Common.Events.FieldTitleEntry">
            <summary>
            Event handler to maintain the friendly field titles of
            template field
            </summary>
        </member>
        <member name="T:Codehouse.Common.Interfaces.ICanGetMyOwnParameters">
            <summary>
            Marker interface to allow controls to get their own parameters in a custom manner
            </summary>
        </member>
        <member name="M:Codehouse.Common.Interfaces.ICanGetMyOwnParameters.GetParameters">
            <summary>
            This method loads the presentation parameters from any container present
            </summary>
        </member>
        <member name="T:Codehouse.Common.Interfaces.ICanGetMyOwnDataSource">
            <summary>
            Marker interface to allow controls to get their own data source in a custom manner
            </summary>
        </member>
        <member name="M:Codehouse.Common.Interfaces.ICanGetMyOwnDataSource.GetDataSourceItem">
            <summary>
            This method loads the presentation parameters from any container present
            </summary>
        </member>
        <member name="T:Codehouse.Common.ItemExtensions">
            <summary>
            Class containing extension methods to the Sitecore Item class
            </summary>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetAbsoluteUrl(Sitecore.Data.Items.Item)">
            <summary>
            Gets the full URL of an item using the correct variation
            of the <see cref="T:Sitecore.Links.LinkManager"/> or <see cref="T:Sitecore.Resources.Media.MediaManager"/>
            and the site domain.  Similar to <seealso cref="M:Codehouse.Common.ItemExtensions.GetUrl(Sitecore.Data.Items.Item)"/>.
            </summary>
            <param name="item">Item to link to</param>
            <returns>The URL of the item</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetBooleanFieldValue(Sitecore.Data.Items.Item,System.String,System.Boolean)">
            <summary>
            Gets a Boolean value from a checkbox field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <param name="defaultValue">Default value to return if the field does not exist.</param>
            <returns>Whether or not the field is checked, if it exists, and the <paramref name="defaultValue"/> if it does not.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetBooleanFieldValue(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a Boolean value from a checkbox field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>True if the field is checked, false if it is not checked, and null if it does not exist.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetDateFieldValue(Sitecore.Data.Items.Item,System.String,System.DateTime)">
            <summary>
            Gets a DateTime value from a field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <param name="defaultValue">The default value</param>
            <returns>The value in the field, if it exists, and the <paramref name="defaultValue"/> if it does not.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetDateFieldValue(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a DateTime value from a field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The value in the field, if it exists, and null if it does not.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetDecimalFieldValue(Sitecore.Data.Items.Item,System.String,System.Decimal)">
            <summary>
            Gets a numeric value from a decimal field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <param name="defaultValue">Default value to return if the field does not exist.</param>
            <returns>The value in the field, if it exists, and the <paramref name="defaultValue"/> if it does not or is empty.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetDecimalFieldValue(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a numeric value from a number field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The value in the field, if it exists, and null if it does not or is empty.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetImageFieldMediaUrl(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets the URL of the media item referenced by an image field.
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The URL of the media item, or null if the field does not exist.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetImageFieldUrl(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets the image source for a particular media field (accounts for any image dimensioning).
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The URL of the media item, or null if the field does not exist.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetLinkFieldGuid(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a string containing the link field target item ID
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The link field target item ID, or null if the field does not exist</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetLinkFieldText(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a string containing the link field text.
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The link field text, or null if the field does not exist.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetLinkFieldUrl(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a string containing the link field URL
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The link field URL, or null if the field does not exist</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetMultilistFieldValue(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets the items referenced by a multilist field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>A list of items referenced, or an empty array if none are</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetNumberFieldValue(Sitecore.Data.Items.Item,System.String,System.Int32)">
            <summary>
            Gets a numeric value from a number field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <param name="defaultValue">Default value to return if the field does not exist.</param>
            <returns>The value in the field, if it exists, and the <paramref name="defaultValue"/> if it does not or is empty.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetNumberFieldValue(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets a numeric value from a number field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The value in the field, if it exists, and null if it does not or is empty.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetReferenceFieldValue(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Gets the item referenced by a reference field
            </summary>
            <param name="item">Item to get the field from</param>
            <param name="fieldName">Name of the field to retrieve</param>
            <returns>The reference item, or null if none is set</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.GetUrl(Sitecore.Data.Items.Item)">
            <summary>
            Gets the URL of an item using the correct variation
            of the <see cref="T:Sitecore.Links.LinkManager"/> or <see cref="T:Sitecore.Resources.Media.MediaManager"/>.
            </summary>
            <param name="item">Item to link to</param>
            <returns>The URL</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.HasField(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Determines whether an item has a particular field
            </summary>
            <param name="item">Item to check</param>
            <param name="fieldName">Field to check for</param>
            <returns>True if the item has a the specified field, false if it does not or the item is null.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.IsValid(Sitecore.Data.Items.Item,Sitecore.Data.Validators.ValidatorsMode,Sitecore.Data.Validators.ValidatorResult,System.Boolean)">
            <summary>
            Checks whether or not a given <paramref name="item"/> is valid.
            </summary>
            <remarks>Experimental!</remarks>
            <param name="item">Item to validate</param>
            <param name="mode">Validation mode to use</param>
            <param name="allowedFailureLevel">The maximum level of failure allowed</param>
            <param name="allowInconclusiveResults">Whether or not to allow inconclusive (e.g. timed out) validation results</param>
            <returns>True if the item passes all validations, false otherwise.</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.RemoveRenderingReference(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Removes a rendering of given id from the renderings on an item.
            </summary>
            <param name="item">Item to be manipulated</param>
            <param name="renderingReferenceUid">UID of the rendering to be removed</param>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.RenderField(Sitecore.Data.Items.Item,System.String)">
            <summary>
            Renders a field properly
            </summary>
            <param name="item">Item containing the field</param>
            <param name="fieldName">Name of the field to render</param>
            <returns>The rendered field value</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.RenderField(Sitecore.Data.Items.Item,System.String,System.Boolean)">
            <summary>
            Renders a field properly
            </summary>
            <param name="item">Item containing the field</param>
            <param name="fieldName">Name of the field to render</param>
            <param name="disableWebEdit">Flag indicating whether or not to disable web editing</param>
            <returns>The rendered field value</returns>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.RenderFieldWithFallback(Sitecore.Data.Items.Item,System.String,System.String[])">
            <summary>
            Renders a field from an item (using field renderer), but also
            try to use fallback fields if the field value is an empty string.
            </summary>
            <param name="item">Item containing the field</param>
            <param name="fieldName">Name of the field to render</param>
            <param name="fallbackFields">Name of fallback fields in order of precedence</param>
            <returns>A rendered field value</returns>
            <remarks>If page editing is enabled, the initial field will be rendered regardless of its value.</remarks>
        </member>
        <member name="M:Codehouse.Common.ItemExtensions.RenderFieldWithFallback(Sitecore.Data.Items.Item,System.Boolean,System.String,System.String[])">
            <summary>
            Renders a field from an item (using field renderer), but also
            try to use fallback fields if the field value is an empty string.
            </summary>
            <param name="item">Item containing the field</param>
            <param name="disableWebEdit">Flag indicating whether or not to disable web editing</param>
            <param name="fieldName">Name of the field to render</param>
            <param name="fallbackFields">Name of fallback fields in order of precedence</param>
            <returns>A rendered field value</returns>
            <remarks>If page editing is enabled, the initial field will be rendered regardless of its value.</remarks>
        </member>
        <member name="T:Codehouse.Common.CodehouseItemIds">
            <summary>
            IDs for the <c>Codehouse.Common</c> Sitecore library
            </summary>
        </member>
        <member name="P:Codehouse.Common.CodehouseItemIds.Templates.SubfolderTemplate">
            <summary>
            Gets the <see cref="T:Sitecore.Data.ID"/> of the <c>Subfolder</c> template
            </summary>
        </member>
        <member name="T:Codehouse.Common.SitecoreItemIds">
            <summary>
            IDs for vanilla Sitecore items
            </summary>
        </member>
        <member name="P:Codehouse.Common.SitecoreItemIds.Templates.Placeholder">
            <summary>
            Gets the <see cref="T:Sitecore.Data.ID"/> of the <c>Placeholder</c> template
            </summary>
        </member>
        <member name="T:Codehouse.Common.Pipelines.GetChromeData.GetDynamicKeyPlaceholderChromeData">
            <remarks>Credit for this goes to http://johnnewcombe.net/blog/post/17 </remarks>
        </member>
        <member name="T:Codehouse.Common.Pipelines.GetPlaceholderRenderings.GetDynamicAllowedRenderings">
            <summary>
            Extends the placeholder matching functionality to allow for matching of the original placeholder
            key where dynamic placeholders are in use.  This is done by removing the dynamic ID from the
            placeholder key.
            </summary>
            <remarks>Credit for this goes to http://johnnewcombe.net/blog/post/17 </remarks>
        </member>
        <member name="M:Codehouse.Common.Pipelines.RenderField.GetImageFieldValueResponsive.Process(Sitecore.Pipelines.RenderField.RenderFieldArgs)">
            <remarks>Credit goes to http://www.mikkelhm.dk/post/2013/07/06/Removing-width-and-height-tags-from-FieldRenderer-and-scimage.aspx </remarks>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.BasicErrorMessage">
            <summary>
            Error message that may be shown to the user
            </summary>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.CanShowError">
            <summary>
            A value determining whether or not an error message should be shown to the user
            </summary>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.DetailedErrorMessage">
            <summary>
            The detailed error message that may be shown to developers (subject to configuration)
            </summary>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.ErrorControl">
            <summary>
            The error control to display
            </summary>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.Exception">
            <summary>
            The exception that has been raised
            </summary>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.Result">
            <summary>
            A value indicating whether or not the error has been handled.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Pipelines.SublayoutError.SublayoutErrorArgs.Sublayout">
            <summary>
            The sublayout raising the error.
            </summary>
        </member>
        <member name="T:Codehouse.Common.Shell.CustomVariablesReplacer.CustomVariablesReplacer">
            <summary>
            <para>
            The CustomVariablesReplacer provides a more extensible way of processing tokens inside
            standard values items and branch templates.  By default, it provides two new tokens:
            </para>
            <para>
            <c>$title</c> - the name of the item in title case
            </para>
            <para>
            <c>$sentence</c> - the name of the item in sentence case
            </para>
            <para>
            In order to add new tokens into the mix, call the <c>AddReplacement</c> static method
            and pass in your implementation of <see cref="T:Codehouse.Common.Shell.CustomVariablesReplacer.ReplacementBase"/>.
            </para>
            </summary>
        </member>
        <member name="F:Codehouse.Common.Shell.CustomVariablesReplacer.CustomVariablesReplacer.Replacements">
            <summary>
            Contains a list of all the replacements that will be run by the replacer.
            </summary>
        </member>
        <member name="P:Codehouse.Common.Shell.CustomVariablesReplacer.CustomVariablesReplacer.CallBaseReplacer">
            <summary>
            Controls whether or not the <see cref="N:Codehouse.Common.Shell.CustomVariablesReplacer"/>
            will call the original <see cref="T:Sitecore.Data.MasterVariablesReplacer"/> prior
            to performing its own replacements.
            <para>Default value: <c>true</c></para>
            </summary>
        </member>
        <member name="T:Codehouse.Common.Shell.CustomVariablesReplacer.ReplacementBase">
            <summary>
            <para>
            Base class for any replacement tokens that are added to the
            custom variable replacer.
            </para>
            <para>
            In order to add your custom replacement token, use
            </para>
            </summary>
        </member>
        <member name="M:Codehouse.Common.Shell.CustomVariablesReplacer.ReplacementBase.ReplacementValid(System.String,Sitecore.Data.Fields.Field)">
            <summary>
            Determines whether or not a replacement should be run
            against a given <paramref name="field"/>
            and field <paramref name="value"/>.
            </summary>
            <param name="value">Field value</param>
            <param name="field">Field being evaluated</param>
            <returns>True iff the replacement should be evaluated</returns>
            <remarks>
            Returns true by default
            </remarks>
        </member>
        <member name="M:Codehouse.Common.Shell.CustomVariablesReplacer.ReplacementBase.ReplacementValid(System.String,Sitecore.Data.Items.Item)">
            <summary>
            Determines whether or not a replacement should be run
            against a given <paramref name="item"/>
            and field <paramref name="value"/>.
            </summary>
            <param name="value">Field value</param>
            <param name="item">Item being evaluated</param>
            <returns>True iff the replacement should be evaluated</returns>
            <remarks>
            Returns true by default
            </remarks>
        </member>
        <member name="M:Codehouse.Common.Shell.CustomVariablesReplacer.ReplacementBase.Replace(System.String,Sitecore.Data.Items.Item)">
            <summary>
            Performs the replacement on a supplied <paramref name="value"/>
            within the context of a given <paramref name="item"/>
            </summary>
            <param name="value">Value to be replaced</param>
            <param name="item">Item context</param>
            <returns>The replaced string</returns>
        </member>
        <member name="T:Codehouse.Common.Shell.InsertRules.InheritInsertOptions">
            <summary>
            Inherits an item's insert options from the nearest parent whose insert
            options field is not set to the standard value.
            </summary>
        </member>
        <member name="M:Codehouse.Common.Shell.InsertRules.InheritInsertOptions.Expand(System.Collections.Generic.List{Sitecore.Data.Items.Item},Sitecore.Data.Items.Item)">
            <summary>
            Expands the specified masters.
            </summary>
            <param name="masters">The masters.</param><param name="item">The item.</param>
        </member>
        <member name="T:Codehouse.Common.SiteContextExtensions">
            <summary>
            Extensions for <see cref="T:Sitecore.Sites.SiteContext"/> and <see cref="T:Sitecore.Web.SiteInfo"/> classes.
            </summary>
        </member>
        <member name="M:Codehouse.Common.SiteContextExtensions.IsContentManaged(Sitecore.Sites.SiteContext)">
            <summary>
            Checks the site configuration for the <c>isContentManaged</c> property,
            which must have a value of <c>true</c>.
            </summary>
            <param name="site"></param>
            <returns><c>True</c> if the site is marked as content managed</returns>
        </member>
        <member name="M:Codehouse.Common.SiteContextExtensions.IsContentManaged(Sitecore.Web.SiteInfo)">
            <summary>
            Checks the site configuration for the <c>isContentManaged</c> property,
            which must have a value of <c>true</c>.
            </summary>
            <param name="site"></param>
            <returns><c>True</c> if the site is marked as content managed</returns>
        </member>
        <member name="M:Codehouse.Common.SiteContextExtensions.GetProperty``1(Sitecore.Sites.SiteContext,System.String,``0)">
            <summary>
            Gets a property from the given <paramref name="site"/> object and converts it
            to the given type parameter <typeparam name="T" />.
            <para>If the property does not exist, then <paramref name="defaultValue"/> is returned.</para>
            </summary>
            <param name="site">Site to get property from</param>
            <param name="key">Property to fetch</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>The property value, or <paramref name="defaultValue"/> if the property is not present.</returns>
        </member>
        <member name="M:Codehouse.Common.SiteContextExtensions.GetProperty``1(Sitecore.Web.SiteInfo,System.String,``0)">
            <summary>
            Gets a property from the given <paramref name="site"/> object and converts it
            to the given type parameter <typeparam name="T" />.
            <para>If the property does not exist, then <paramref name="defaultValue"/> is returned.</para>
            </summary>
            <param name="site">Site to get property from</param>
            <param name="key">Property to fetch</param>
            <param name="defaultValue">Default value if not found</param>
            <returns>The property value, or <paramref name="defaultValue"/> if the property is not present.</returns>
        </member>
        <member name="M:Codehouse.Common.Utilities.AssetHelper.GetCssDependencies">
            <summary>
            Gets any CSS dependencies that have been registered for this request
            </summary>
            <returns>An array of css dependencies.</returns>
        </member>
        <member name="M:Codehouse.Common.Utilities.AssetHelper.GetScriptDependencies">
            <summary>
            Gets any JS dependencies that have been registered for this request
            </summary>
            <returns>An array of JS dependencies</returns>
        </member>
        <member name="M:Codehouse.Common.Utilities.AssetHelper.RegisterCssDependency(System.String,System.Int32)">
            <summary>
            Registers a CSS file dependency
            </summary>
            <param name="path">Path to the CSS file</param>
            <param name="order">Order of the dependency</param>
        </member>
        <member name="M:Codehouse.Common.Utilities.AssetHelper.RegisterCssDependency(Codehouse.Common.Utilities.AssetHelper.CssDependency)">
            <summary>
            Registers a CSS dependency
            </summary>
            <param name="dependency">Full dependency details</param>
        </member>
        <member name="M:Codehouse.Common.Utilities.AssetHelper.RegisterScriptDependency(System.String,System.Int32)">
            <summary>
            Registers a JavaScript file dependency
            </summary>
            <param name="path">Path to the JS file</param>
            <param name="order">Order of the dependency</param>
        </member>
        <member name="M:Codehouse.Common.Utilities.AssetHelper.RegisterScriptDependency(Codehouse.Common.Utilities.AssetHelper.ScriptDependency)">
            <summary>
            Registers a JavaScript dependency
            </summary>
            <param name="dependency">Full dependency details</param>
        </member>
        <member name="M:Codehouse.Common.Utilities.DataSourceHelper.SetSitecoreControlDataSources(System.Web.UI.Control,System.String)">
            <summary>
            Sets the DataSource property of Sitecore web controls that are child controls of the
            specified <paramref name="control"/>.
            </summary>
            <param name="control">Control to set DataSources under</param>
            <param name="dataSource">DataSource to be set</param>
        </member>
        <member name="M:Codehouse.Common.Utilities.DataSourceHelper.SetSitecoreControlDataSources(System.Web.UI.Control,Sitecore.Data.Items.Item)">
            <summary>
            Sets the DataSource property of Sitecore web controls that are child controls of the
            specified <paramref name="control"/>.
            </summary>
            <param name="control">Control to set DataSources under</param>
            <param name="dataSourceItem">DataSource to be set</param>
        </member>
        <member name="M:Codehouse.Common.Utilities.DataSourceHelper.GatherControls(System.Web.UI.Control)">
            <summary>
            Gathers  web controls that are children of the specified <paramref name="control"/>, which
            are either Sitecore web controls, or implement the <see cref="T:Codehouse.Common.Interfaces.IHaveADataSource"/> marker
            interface
            </summary>
            <param name="control">Control to recurse through</param>
        </member>
        <member name="P:Codehouse.Common.Utilities.DynamicPlaceholderHelper.DynamicPlaceholderKeyRegex">
            <summary>
            Regular expression to identify a dynamic placeholder key
            </summary>
        </member>
        <member name="T:Codehouse.Common.Utilities.SiteTagReplacer">
            <summary>
            Utility class for replacing tags in source properties of some custom fields.
            </summary>
            <remarks>
            Supported tags include:
                $self - the source item's path
                $siteRoot - the root path of the site
                $siteHome - the home path of the site
            </remarks>
        </member>
        <member name="M:Codehouse.Common.XsltExtensions.ExtendedXslHelper.GetItem(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the item from a given <paramref name="iterator"/> object
            </summary>
            <param name="iterator">Iterator containing the item</param>
            <returns>The sitecore item contained in the <paramref name="iterator"/></returns>
            <remarks>
            This was overridden because Sitecore's default implementation does not respect
            the language of the item being rendered.
            </remarks>
        </member>
        <member name="M:Codehouse.Common.XsltExtensions.ExtendedXslHelper.IsAncestorOf(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Determines whether item A is an ancestor of item B
            </summary>
            <param name="xmlItemA">Item A</param>
            <param name="xmlItemB">Item B</param>
            <returns>Returns true iff item A is an ancestor of item B</returns>
        </member>
        <member name="M:Codehouse.Common.XsltExtensions.ExtendedXslHelper.IsSiblingOf(System.Xml.XPath.XPathNodeIterator,System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Determines whether item A is a sibling of item B
            </summary>
            <param name="xmlItemA">Item A</param>
            <param name="xmlItemB">Item B</param>
            <returns>Returns true iff item A is a sibling of item B</returns>
        </member>
        <member name="M:Codehouse.Common.XsltExtensions.ExtendedXslHelper.ShortTitle(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the short title for an item.
            Renders the ShortTitle field, falling back to Title
            </summary>
            <param name="xmlItem">Item to get the short title for</param>
            <returns>A string containing the rendered short title</returns>
        </member>
        <member name="M:Codehouse.Common.XsltExtensions.ExtendedXslHelper.Title(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Gets the title for an item.
            Renders the Title field, falling back to ShortTitle
            </summary>
            <param name="xmlItem">Item to get the title for</param>
            <returns>A string containing the rendered title</returns>
        </member>
    </members>
</doc>

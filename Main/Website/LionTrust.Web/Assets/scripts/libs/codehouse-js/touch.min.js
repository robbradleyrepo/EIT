/* 
 * ---------------------------------------- *
 * Name: 	Codehouse Touch                 *
 * Type: 	JavaScript                      *
 * Version: 1.0.0                           *
 * Author:	Leon Slater | Matt O'Neill      *
 * Status:	Release                         *
 * Requisites: n/a                          *
 * ---------------------------------------- *
 */

window.touch || (window.touch = {}); var chTouch = function (e, t) { var n = { threshold: 20, swipeDirection: "horizontal", start: function () { }, beforeEnd: function () { }, right: function () { }, left: function () { }, up: function () { }, down: function () { }, moving: function () { }, reached: function () { }, notReached: function () { }, end: function () { }, reset: function () { } }; var r = document.documentElement, i = { horizontal: "pan-y", vertical: "pan-x", all: "none" }[n.swipeDirection], s = 0; this.browserTouchSupport = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0; var o = window.navigator.pointerEnabled, u = window.navigator.msPointerEnabled, a = this.browserTouchSupport ? o || u : false, f = { start: { IEedge: "pointerdown", IE10: "MSPointerDown", webkit: "touchstart" }, move: { IEedge: "pointermove", IE10: "MSPointerMove", webkit: "touchmove" }, end: { IEedge: "pointerup", IE10: "MSPointerUp", webkit: "touchend" }, cancel: { IEedge: "pointercancel", IE10: "MSPointerCancel", webkit: "touchcancel" } }, l = a ? o ? "IEedge" : "IE10" : "webkit", c = f.cancel[l], h = f.start[l], p = f.move[l], d = f.end[l]; this.touchDevice = !!("undefined" != typeof r.ontouchstart) || a || false; var v = function (e, t) { function b() { return { horizontal: f > n.threshold ? "right" : f < -n.threshold ? "left" : "notReached", vertical: l > n.threshold ? "down" : l < -n.threshold ? "up" : "notReached", all: null }[n.swipeDirection] } function w(e) { if (typeof e == "function") { e(g) } } function E() { s--; o = 0; u = 0; f = 0; l = 0; v = true; m = -1, y = false; e.removeEventListener(p, T); e.removeEventListener(d, N); if (s === 0 && e !== r) { r.style.msTouchAction = "auto"; r.style.touchAction = "auto" } if (a) { r.removeEventListener(p, T); r.removeEventListener(d, N) } if (typeof n.reset == "function") { n.reset(g) } } function S(e, t) { var n = a ? e.pointerType === "touch" || e.pointerType === 2 : true; if (n) { switch (t) { case "start": n = m === -1; break; case "move": if (a) { n = m === e.pointerId } else { n = m === e.targetTouches[0].identifier } break; case "end": if (a) { n = m === e.pointerId } else { n = m === e.changedTouches[0].identifier } break } } return n } function x(t) { if (S(t, "start")) { var i = a ? t : t.targetTouches[0]; o = i.clientX; u = i.clientY; e.addEventListener(p, T); e.addEventListener(d, N); if (a) { r.addEventListener(p, T); r.addEventListener(d, N) } m = a ? i.pointerId : i.identifier; if (s === 0 && e !== r) { r.style.msTouchAction = "none"; r.style.touchAction = "none" } s++; if (typeof n.start == "function") { n.start(g) } } } function T(e) { if (S(e, "move")) { var t = a ? e : e.targetTouches[0], r = Math.abs; f = t.clientX - o; l = t.clientY - u; if (r(f) > n.threshold || r(l) > n.threshold) { if (!y) { n.reached(g); y = true } } if (v) { v = { horizontal: r(l) > r(f), vertical: r(l) < r(f), all: false }[n.swipeDirection] } if (!v) { e.preventDefault(); if (typeof n.moving == "function") { g.x = f; g.y = l; n.moving(g) } } else { E() } } } function N(e) { if (S(e, "end")) { if (!v) { var t = b(); w(n.beforeEnd); w(n[t]); w(n.end); E() } } } var o = 0, u = 0, f = 0, l = 0, v = true, m = -1, g = { el: e, x: 0, y: 0 }, y = false; e.style.msTouchAction = i; e.style.touchAction = i; for (var C in t) { if (n.hasOwnProperty(C)) { n[C] = t[C] } } if (e.addEventListener) { e.addEventListener(h, x); e.addEventListener(c, E) } }; this.bind = function (e) { if (!e.length) { v(e, arguments[1]) } else { for (var t = 0; t < e.length; t++) { v(e[t], arguments[1]) } } }; if (e !== undefined) { this.bind(e, t) } }; window.touch = new chTouch; if (window.jQuery) { jQuery.fn.touch = function (e) { var t = new chTouch; return t.bind(jQuery(this), e) } }
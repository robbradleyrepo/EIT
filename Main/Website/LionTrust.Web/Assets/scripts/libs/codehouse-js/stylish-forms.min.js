/*
 * ---------------------------------------- *
 * Name:      Codehouse Stylish Forms       *
 * Version:   2.2.5                         *
 * Author:    Matt O'Neill | Joe Moore      *
 * Status:    Development                   *
 * Requisites: >=jquery 1.11.0              *
 *               jquery ui (opt)            *
 * ---------------------------------------- *
 */

!function (t) { window.stylishForms || (window.stylishForms = {}), window.stylishForms = new function () { var s = !1, e = function (e) { _input = function () { e.find('input[type="text"], input[type="number"], input[type="password"], input[type="email"], textarea').each(function () { t(this).wrap('<div class="stylish-' + this.type + '" data-type="' + this.type + '" />').before("<span></span>") }), e.find("input.date").each(function () { t(this).parent().addClass("multidate").children("span").addClass("date") }) }, _select = function () { e.find("select").each(function () { t(this).wrap('<div class="stylish-select" data-type="' + this.type + '" />').css({ opacity: 0, position: "absolute" }).before('<span class="selected"><span class="text">' + t(this).find("option:selected").text() + '</span><span class="ico"></span></span><ul></ul>'); var s = "", e = 0; t(this).children().each(function () { t(this).is("optgroup") ? (s += '<li class="group">', s += "<span>" + t(this).attr("label") + "</span>", s += "<ul>", t(this).children().each(function () { t(this).data("index", e), s += '<li data-index="' + e + '" ' + (t(this).is(":disabled") ? '"class="disabled"' : "") + (t(this).is(":selected") ? "selected" : "") + ">" + t(this).text() + "</li>", e++ }), s += "</ul>", s += "</li>") : (t(this).data("index", e), s += '<li data-index="' + e + '" ' + (t(this).is(":disabled") ? 'class="disabled"' : "") + (t(this).is(":selected") ? "selected" : "") + ">" + t(this).text() + "</li>", e++) }), t(this).siblings("ul").append(s) }) }, _checkboxDropdowns = function () { e.find('ul[data-stylish-group="checkbox-dropdown"]').each(function () { t(this).wrap('<div class="stylish-select checkbox-dropdown" data-type="' + this.type + '" />').before('<span class="selected"><span class="text">Please select...</span><span class="ico"></span></span>') }) }, _dualStates = function () { e.find('input[type="checkbox"], input[type="radio"]').each(function () { t(this).wrap('<div class="stylish-ds" data-type="' + this.type + '" />').css({ opacity: 0, position: "absolute" }).before('<span class="' + (t(this).is(":checked") ? "checked" : "") + '"><span class="ico"></span></span>') }) }, _range = function () { e.find('[data-type="range"]').each(function () { var s = t(this), e = s.data(), i = e.updateValue, n = e.inputfor, a = s.parent().find('[data-input-from="' + n + '"]'), l = s.parent().find('[data-input-to="' + n + '"]'), c = [a.val(), l.val()].filter(function (t) { return void 0 !== t }); s.slider({ range: c.length > 1, values: c, step: e.precision, min: e.min, max: e.max, slide: function (t, s) { var e = s.values[0], n = s.values[1]; i && (a && a.val(e), l && l.val(n)) }, start: _helpers.hideDropdowns }) }) }, _helpers = { checkboxDdSelected: function (s) { var e = s.find('input[type="checkbox"]:checked, input[type="radio"]:checked'), i = s.find(".selected > span.text"); if (0 === e.length) i.html(s.find("li:first-child label").text()); else { var n = [], a = ""; e.each(function () { n.push(t('label[for="' + t(this).attr("id") + '"]').text()) }), a = n.join(", "), i.html(a), i.attr("title", a) } }, hideDropdowns: function (s) { 0 === t(s.target).parents(".stylish-select").length && t("[data-stylish-form]").find(".stylish-select").removeClass("active").children("ul").hide().css("max-height", "").removeClass("show-above") } }, _actions = function () { e.find('.stylish-ds input[type="checkbox"]').each(function () { function s(t) { e.parents(".stylish-select.checkbox-dropdown").length && (_helpers.checkboxDdSelected(e.parents(".stylish-select.checkbox-dropdown")), t && e.closest("li").toggleClass("checked")) } var e = t(this); e.on({ change: function () { t(this).siblings("span").toggleClass("checked"), s(t(this)) } }), s() }), e.find(".stylish-ds input[type=radio]").on("change", function () { e.find('input[type="radio"][name="' + t(this).attr("name") + '"]').each(function () { t(this).siblings("span").removeClass("checked") }), t(this).siblings("span").addClass("checked") }), e.find(".stylish-select .selected").on("click", function (s) { s.stopPropagation(); var e = t(this).siblings("ul"); t(".stylish-select > ul").not(e).hide().parent().removeClass("active"), e.toggle().parent().toggleClass("active"); var i = e.offset(), n = t(window).scrollTop(), a = i.top + e.outerHeight(), l = t(window).height() + n, c = i.top - n, o = l - i.top; a > l ? c > o ? (e.css("max-height", .8 * c), e.addClass("show-above")) : (e.css("max-height", .8 * (l - i.top)), e.removeClass("show-above")) : (e.removeClass("show-above"), e.css("max-height", "")) }), e.find(".stylish-select:not(.checkbox-dropdown)").on("click", "li", function (s) { s.stopPropagation(); var e = t(this); e.is(":not(.group, .disabled)") && (e.parents(".stylish-select").children("ul").toggle().siblings(".selected").find("span.text").html(e.text()), e.parents(".stylish-select").find("select").prop("selectedIndex", e.data("index")).change()) }), e.find(".stylish-select select").on("change", function () { t(this).parent().find("span.selected > span.text").html(t(this).find("option:selected").text()) }), s === !1 && (t(document).on("click touchend", _helpers.hideDropdowns), s = !0) }, void function () { e.addClass("stylish-form").attr("data-stylish-form", "set"), _input(), _select(), _dualStates(), _checkboxDropdowns(), jQuery.ui && _range(), _actions() }() }; this.apply = function () { t('[data-stylish-form="true"]').each(function () { e(t(this)) }) }, this.update = function () { this.apply() } } }(jQuery);
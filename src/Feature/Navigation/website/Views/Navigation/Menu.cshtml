@using Glass.Mapper.Sc.Web.Mvc
@using System.Collections.Specialized;
@using LionTrust.Foundation.ORM.Extensions;
@using LionTrust.Foundation.Navigation;
@using LionTrust.Foundation.Analytics.Goals;

@model LionTrust.Feature.Navigation.Models.NavigationViewModel
@if (Model != null && Model.HomeItem != null)
{
    <div class="sidebar sidebar_border">
        <div class="sidebar__top">
            <div class="sidebar__header">
                <button class="sidebar__close-btn"></button>
                <div class="sidebar__logo">
                    <a href="@Model.HomeItem.Url" class="sidebar__logo-link">
                        @if (Model.HomeItem.Logo != null)
                        {
                            @Html.Glass().RenderImage(Model.HomeItem, x => x.Logo, new { alt = Model.HomeItem.Logo != null ? Model.HomeItem.Logo.Alt : string.Empty, @class = "sidebar__logo-img" }, isEditable: true)
                        }
                    </a>
                </div>
            </div>
            <nav class="navigation">
                @if (Model.MenuItems != null && Model.MenuItems.Any())
                {
                    <ul class="navigation__list">
                        @foreach (var menuItem in Model.MenuItems.WithAccessTo())
                        {
                            var menuItemsSecondLevel = menuItem.MenuItems.Where(m => !m.ExcludeInSearchResults);

                            var filteredChildrens = (menuItemsSecondLevel != null && menuItemsSecondLevel.Any())
                                    ? menuItemsSecondLevel
                                    : menuItem.Children.Where(m => !m.ExcludeInSearchResults);

                            if (filteredChildrens != null && filteredChildrens.Any())
                            {
                                <li class="navigation__item">
                                    <label class="navigation__link" for="@menuItem.Id">
                                        @Html.Glass().Editable(menuItem, z => z.PageTitle)
                                    </label>
                                </li>
                            }
                            else
                            {
                                <li class="navigation__item">
                                    <a href="@menuItem.Url" class="navigation__link">
                                        @Html.Glass().Editable(menuItem, z => z.PageTitle)
                                    </a>
                                </li>
                            }
                        }
                    </ul>
                }
            </nav>

            @if (Model.ShowMyLiontrust && Model.HomeItem.MyLionTrust != null)
            {
                <div class="sidebar__profile-btn">
                    @using (Html.Glass().BeginRenderLinkWithGoal(Model.HomeItem, p => p.MyLionTrust, Model.HomeItem.MyLiontrustGoal,
                        new System.Collections.Specialized.NameValueCollection { { "class", "btn btn-primary btn-block" } }, isEditable: true))
                    {
                        <i class="icon-user"></i>
                        if (!string.IsNullOrWhiteSpace(Model.HomeItem.MyLionTrust.Text))
                        {
                            @Model.HomeItem.MyLionTrust.Text
                        }
                    }
                </div>
            }

            @if (Model.ShowLionHub && Model.HomeItem.LionHub != null)
            {
                <div class="sidebar__profile-btn">
                    @using (Html.Glass().BeginRenderLink(Model.HomeItem, p => p.LionHub, new { @class = "btn btn-primary btn-block" }, isEditable: true))
                    {
                        <i class="icon-user"></i>
                        if (!string.IsNullOrWhiteSpace(Model.HomeItem.LionHub.Text))
                        {
                            @Model.HomeItem.LionHub.Text
                        }
                    }
                </div>
            }

            <div class="sidebar__setting">
                <ul class="sidebar-actions">
                    @if (Model.HomeItem.MyPreferences != null)
                    {
                        <li class="sidebar-actions__item">
                            <a href="@Model.HomeItem.MyPreferences.Url" class="sidebar-actions__link">
                                <i class="icon-settings"></i>
                                @Html.Glass().Editable(Model.HomeItem.MyPreferences, z => z.PageTitle)
                            </a>
                        </li>
                    }
                    @if (Model.HomeItem.SignupNewsLetter != null)
                    {
                        <li class="sidebar-actions__item">
                            <a href="@Model.HomeItem.SignupNewsLetter.Url" class="sidebar-actions__link">
                                <i class="icon-email"></i>
                                @Html.Glass().Editable(Model.HomeItem.SignupNewsLetter, z => z.PageTitle)
                            </a>
                        </li>
                    }
                    @if (!string.IsNullOrEmpty(Model.HomeItem.SearchLabel))
                    {
                        <li class="sidebar-actions__item">
                            <span class="sidebar-actions__link sidebar-actions__link--open-search">
                                <i class="icon-search"></i>
                                @Model.HomeItem.SearchLabel
                            </span>
                        </li>
                    }
                    @if (Model.HomeItem.ContactUsPage != null)
                    {
                        <li class="sidebar-actions__item">
                            <a href="@Model.HomeItem.ContactUsPage.Url" class="sidebar-actions__link">
                                <i class="icon-chat"></i>
                                @Html.Glass().Editable(Model.HomeItem.ContactUsPage, z => z.PageTitle)
                            </a>
                        </li>
                    }
                </ul>
            </div>
            @Html.Partial("~/Views/Navigation/_Social.cshtml", Model.HomeItem.FooterConfiguration)
            <div class="user-status">
                <div class="user-status_hr"></div>
                <span class="user-status__text">
                    @Model.HomeItem.YouAreViewingLabelWithArticle
                    <span class="user-status__name">@Model.HomeItem.OnboardingRoleName</span>
                    @Model.HomeItem.FromLabel
                    <span class="user-status__name">@Model.HomeItem.CurrentCountry</span>
                    | <a href="@Model.HomeItem.ChangeInvestorUrl" class="user-status__change-type">@Html.Glass().Editable(Model.HomeItem, m => m.ChangeLabel)</a>
                </span>
            </div>
        </div>
        <div class="sidebar__bottom">
            @if (Model.MenuItems != null && Model.MenuItems.Any())
            {
                <nav class="navigation navigation_desktop">
                    <ul class="navigation__list">
                        @{
                            bool hasDropDowns = false;
                            hasDropDowns =
                                Model.HomeItem.HeaderConfiguration != null
                                 && Model.HomeItem.HeaderConfiguration.HeaderDropDowns != null
                                 && Model.HomeItem.HeaderConfiguration.HeaderDropDowns.Any();
                        }
                        @foreach (var menuItem in Model.MenuItems.WithAccessTo())
                        {
                            bool hideInDesktop = false;

                            if (hasDropDowns)
                            {
                                foreach (var dropDown in Model.HomeItem.HeaderConfiguration.HeaderDropDowns)
                                {
                                    if (dropDown.PageItem != null)
                                    {
                                        if (String.Equals(dropDown.PageItem.Id.ToString(), menuItem.Id.ToString(), StringComparison.InvariantCultureIgnoreCase))
                                        {
                                            hideInDesktop = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (hideInDesktop)
                            {
                                continue;
                            }

                            var menuItemsSecondLevel = menuItem.MenuItems.Where(m => !m.ExcludeInSearchResults);

                            var filteredChildrens = (menuItemsSecondLevel != null && menuItemsSecondLevel.Any())
                                    ? menuItemsSecondLevel
                                    : menuItem.Children.Where(m => !m.ExcludeInSearchResults);

                            if (filteredChildrens != null && filteredChildrens.Any())
                            {
                                <li class="navigation__item">
                                    <label class="navigation__link" for="@menuItem.Id">
                                        @Html.Glass().Editable(menuItem, z => z.PageTitle)
                                    </label>
                                </li>
                            }
                            else
                            {
                                <li class="navigation__item">
                                    <a href="@menuItem.Url" class="navigation__link">
                                        @Html.Glass().Editable(menuItem, z => z.PageTitle)
                                    </a>
                                </li>
                            }
                        }

                    </ul>
                </nav>
            }
        </div>

        @if (Model.HomeItem.HeaderConfiguration != null
            && Model.HomeItem.HeaderConfiguration.HeaderDropDowns != null
            && Model.HomeItem.HeaderConfiguration.HeaderDropDowns.Any())
        {
            <div class="navigation__sublinks-items">
                @foreach (var dropDown in Model.HomeItem.HeaderConfiguration.HeaderDropDowns)
                {
                    if (dropDown.PageItem != null)
                    {
                        if (dropDown.PageItem.MenuItems.Any())
                        {
                            continue;
                        }

                        var id = dropDown.PageItem.MenuItems.Any() ? dropDown.Id : dropDown.PageItem.Id;
                        var navigationColumnCount = 0;
                        <div class="navigation__item">
                            <input type="checkbox" id="@id" class="navigation__checkbox">
                            <div class="navigation__submenu">
                                <label class="navigation__close-submenu" for="@id">
                                    <i class="icon-chevron-left"></i>
                                    back
                                </label>
                                <ul class="navigation__sub-list">
                                    <li class="navigation__sub-item">
                                        <a class="mb-3 navigation__sub-link navigation__sub-link_heading" href="@dropDown.PageItem.Url">
                                            @Html.Glass().Editable(dropDown.PageItem, z => z.PageTitle)
                                        </a>
                                        @if (dropDown.ShowCTA)
                                        {
                                            using (Html.Glass().BeginRenderLink(dropDown, x => x.CTALink, new NameValueCollection { { "class", "btn btn-primary btn-block mb-4" } }, isEditable: true))
                                            {
                                                if (dropDown.CTALink != null && !string.IsNullOrEmpty(dropDown.CTALink.Text))
                                                {
                                                    @dropDown.CTALink.Text
                                                }
                                            }
                                        }
                                    </li>
                                </ul>
                                @if (dropDown.NavigationColumns != null && dropDown.NavigationColumns.Any())
                                {
                                    foreach (var navigationColumn in dropDown.NavigationColumns)
                                    {
                                        switch (navigationColumnCount)
                                        {
                                            case 0:
                                                {
                                                    @:<div>
                                                        break;
                                                    }
                                                case 1:
                                                    {
                                                        @:<div class="mt-3">
                                                            break;
                                                        }
                                                    case 2:
                                                        {
                                                            @:<div class="mt-4">
                                                                break;
                                                            }
                                                        default:
                                                            @:<div>
                                                                break;
                                                        }
                                                        navigationColumnCount++;

                                                        <h4 class="dropdown-nav__title">@Html.Glass().Editable(navigationColumn, z => z.ColumnTitle)</h4>
                                                        if (navigationColumn.ShowColumnLink)
                                                        {
                                                            using (Html.Glass().BeginRenderLink(navigationColumn, z => z.ColumnLink, new NameValueCollection { { "class", "link-styles d-block mb-4" } }, isEditable: true))
                                                            {
                                                                if (navigationColumn.ColumnLink != null
                                                                    && !string.IsNullOrEmpty(navigationColumn.ColumnLink.Text))
                                                                {
                                                                    @navigationColumn.ColumnLink.Text
                                                                }
                                                                <i class="icon-arrow-right"></i>
                                                            }

                                                            if (navigationColumn.PageLinks != null && navigationColumn.PageLinks.Any())
                                                            {
                                                                <ul class="dropdown-nav__list">
                                                                    @foreach (var pageLink in navigationColumn.PageLinks)
                                                                    {
                                                                        <li class="dropdown-nav__item">
                                                                            <a href="@pageLink.Url" class="dropdown-nav__link">@Html.Glass().Editable(pageLink, z => z.PageTitle)</a>
                                                                        </li>
                                                                    }
                                                                </ul>
                                                            }
                                                        }

                                                        if (navigationColumnCount > 0)
                                                        {
                                                        @:</div>
                                                        if (navigationColumnCount >= 2)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                @if (navigationColumnCount < 3 && dropDown.Images != null && dropDown.Images.Any())
                                {
                                    if (navigationColumnCount < 2)
                                    {
                                        var imagesCount = dropDown.Images.Count();
                                        if (imagesCount == 1)
                                        {
                                            var image = dropDown.Images.FirstOrDefault();
                                            if (image != null)
                                            {
                                                <div class="navigation__submenu--divider">
                                                    @QuickLinkCTA(image, "quick-link-chart")
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            var imageCollecion = dropDown.Images;
                                            <div class="navigation__submenu--divider">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        @if (imagesCount == 2)
                                                        {
                                                            var firstImage = dropDown.Images.FirstOrDefault();
                                                            @QuickLinkCTA(firstImage, "quick-link-chart")
                                                            imageCollecion = imageCollecion.Skip(1);
                                                        }
                                                        else
                                                        {
                                                            var firstImage = dropDown.Images.FirstOrDefault();
                                                            @QuickLinkCTA(firstImage, "quick-link-chart quick-link-chart__small")
                                                            var secondImage = dropDown.Images.Skip(1).FirstOrDefault();
                                                            @QuickLinkCTA(secondImage, "quick-link-chart quick-link-chart__small")
                                                            imageCollecion = imageCollecion.Skip(2);
                                                        }
                                                    </div>
                                                    <div class="col-md-6">
                                                        @if (imagesCount < 4)
                                                        {
                                                            var secondColumnImage = imageCollecion.FirstOrDefault();
                                                            @QuickLinkCTA(secondColumnImage, "quick-link-chart")
                                                        }
                                                        else
                                                        {
                                                            var secondColumnFirstImage = imageCollecion.FirstOrDefault();
                                                            @QuickLinkCTA(secondColumnFirstImage, "quick-link-chart quick-link-chart__small")
                                                            var secondColumnSecondImage = imageCollecion.Skip(1).FirstOrDefault();
                                                            @QuickLinkCTA(secondColumnSecondImage, "quick-link-chart quick-link-chart__small")
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        var firstImage = dropDown.Images.FirstOrDefault();
                                        if (dropDown.Images.Count() == 1)
                                        {
                                            if (firstImage != null)
                                            {
                                                <div class="navigation__submenu--divider">
                                                    @QuickLinkCTA(firstImage, "quick-link-chart")
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            var secondImage = dropDown.Images.Skip(1).FirstOrDefault();
                                            if (firstImage != null || secondImage != null)
                                            {
                                                <div class="navigation__submenu--divider">
                                                    @QuickLinkCTA(firstImage, "quick-link-chart quick-link-chart__small")
                                                    @QuickLinkCTA(secondImage, "quick-link-chart quick-link-chart__small")
                                                </div>
                                            }
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </div>
    <!-- For desktop sidebar links items -->
    if (Model.MenuItems != null && Model.MenuItems.Any())
    {
        <div class="navigation__sublinks-items">
            @foreach (var menuItem in Model.MenuItems.WithAccessTo())
            {

                var menuItemsSecondLevel = menuItem.MenuItems.Where(m => !m.ExcludeInSearchResults);

                var filteredChildren = (menuItemsSecondLevel != null && menuItemsSecondLevel.Any())
                        ? menuItemsSecondLevel
                        : menuItem.Children.Where(m => !m.ExcludeInSearchResults);
                filteredChildren = filteredChildren.Where(m => m.TemplateId != LionTrust.Feature.Navigation.Constants.LocalDatasource.TemplateID);

                <div class="navigation__item">
                    <input type="checkbox" id="@menuItem.Id" class="navigation__checkbox">
                    <div class="navigation__submenu">
                        <label class="navigation__close-submenu" for="@menuItem.Id">
                            <i class="icon-chevron-left"></i>
                            back
                        </label>
                        <ul class="navigation__sub-list">
                            <li class="navigation__sub-item">
                                <a class="navigation__sub-link navigation__sub-link_heading" href="@menuItem.Url">
                                    @Html.Glass().Editable(menuItem, z => z.PageTitle)
                                    <i class="icon-chevron-right"></i>
                                </a>
                            </li>
                            @if (filteredChildren != null && filteredChildren.Any())
                            {
                                foreach (var child in filteredChildren)
                                {
                                    <li class="navigation__sub-item">
                                        <a class="navigation__sub-link" href="@child.Url">@Html.Glass().Editable(child, z => z.PageTitle)</a>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    }
    <div class="sidebar-overlay"></div>

}
else if (Sitecore.Context.PageMode.IsExperienceEditor)
{
    @:Issue with navigation: Root/Home item isn't correct
}

@helper QuickLinkCTA(LionTrust.Foundation.Navigation.Models.IQuickLinkCTA image, string cssClass)
{
    if (image != null)
    {
        if (image.Link != null || Sitecore.Context.PageMode.IsExperienceEditor)
        {
            using (Html.Glass().BeginRenderLink(image, z => z.Link, new NameValueCollection { { "class", cssClass }, { "style", image.Image != null ? image.Image.GetSafeBackgroundImageStyle() : string.Empty } }, isEditable: true))
            {
                <span class="quick-link-chart__title">@Html.Glass().Editable(image, z => z.Title)</span>
                <span class="quick-link-chart__text">@Html.Glass().Editable(image, z => z.Description)</span>
            }
        }
        else
        {
            <a href="#" class="@cssClass" style="@(image.Image !=null ? image.Image.GetSafeBackgroundImageStyle() : string.Empty)">
                <span class="quick-link-chart__title">@Html.Glass().Editable(image, z => z.Title)</span>
                <span class="quick-link-chart__text">@Html.Glass().Editable(image, z => z.Description)</span>
            </a>
        }
    }
}

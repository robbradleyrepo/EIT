@using Glass.Mapper.Sc.Web.Mvc
@model LionTrust.Feature.Listings.Models.PerformanceCharts.PerformanceChartViewModel
<div class="stucked-chart">
    <h5 class="stucked-chart__title">@Html.Glass().Editable(Model.Data, m => m.Title)</h5>
    <div class="stucked-chart__wrapper">
        @if (!Sitecore.Context.PageMode.IsExperienceEditor)
        {
            <canvas class="stucked-chart" width="@Model.Data.Width" height="@Model.Data.Height"
                    data-chart='@Model.ChartJson'>
            </canvas>
        }
        else if (Model.Data.ChartColumns != null && Model.Data.ChartColumns != null)
        {
            using (Html.Glass().BeginEditFrame("/sitecore/content/Applications/WebEdit/Edit Frame Buttons/Feature/Listings/PerformanceCharts", Model.Data.Id.ToString(), "Edit Performance Chart"))
            {
                <div class="table-responsive-lg">
                    <table class="table table-striped mb-3">
                        @foreach (var chart in Model.Data.ChartColumns)
                        {
                            <tr>
                                <th>
                                    @using (Html.Glass().BeginEditFrame("/sitecore/content/Applications/WebEdit/Edit Frame Buttons/Feature/Listings/PerformanceCharts/Chart", chart.Id.ToString(), "Add new color/value for chart column"))
                                    {
                                        @Html.Glass().Editable(chart, c => c.Title)
                                    }
                                </th>
                                @if (chart.ChartValues != null)
                                {
                                    foreach (var chartValue in chart.ChartValues)
                                    {
                                        <td>
                                            @using (Html.Glass().BeginEditFrame("/sitecore/content/Applications/WebEdit/Edit Frame Buttons/Feature/Listings/PerformanceCharts/ChartValue", chartValue.Id.ToString(), "Edit Chart values"))
                                            {
                                                @Html.Glass().Editable(chartValue, cv => cv.Value)
                                            }
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    </table>
                </div>
            }

        }
        <small class="small-text stucked-chart__small">
            <span class="text-gold">*</span> @Html.Glass().Editable(Model.Data, m => m.LegendDescription)
        </small>
    </div>
</div>